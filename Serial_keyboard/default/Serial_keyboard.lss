
Serial_keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000790  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800062  00800062  00000826  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000828  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d1  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4f  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000334  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000610  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b9  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
   2:	ac c2       	rjmp	.+1368   	; 0x55c <__vector_1>
   4:	09 c1       	rjmp	.+530    	; 0x218 <__bad_interrupt>
   6:	08 c1       	rjmp	.+528    	; 0x218 <__bad_interrupt>
   8:	07 c1       	rjmp	.+526    	; 0x218 <__bad_interrupt>
   a:	06 c1       	rjmp	.+524    	; 0x218 <__bad_interrupt>
   c:	05 c1       	rjmp	.+522    	; 0x218 <__bad_interrupt>
   e:	04 c1       	rjmp	.+520    	; 0x218 <__bad_interrupt>
  10:	03 c1       	rjmp	.+518    	; 0x218 <__bad_interrupt>
  12:	02 c1       	rjmp	.+516    	; 0x218 <__bad_interrupt>
  14:	01 c1       	rjmp	.+514    	; 0x218 <__bad_interrupt>
  16:	00 c1       	rjmp	.+512    	; 0x218 <__bad_interrupt>
  18:	ff c0       	rjmp	.+510    	; 0x218 <__bad_interrupt>
  1a:	fe c0       	rjmp	.+508    	; 0x218 <__bad_interrupt>
  1c:	fd c0       	rjmp	.+506    	; 0x218 <__bad_interrupt>
  1e:	fc c0       	rjmp	.+504    	; 0x218 <__bad_interrupt>
  20:	fb c0       	rjmp	.+502    	; 0x218 <__bad_interrupt>
  22:	fa c0       	rjmp	.+500    	; 0x218 <__bad_interrupt>
  24:	f9 c0       	rjmp	.+498    	; 0x218 <__bad_interrupt>

00000026 <usbDescriptorString0>:
  26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
  2a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  3a:	74 00                                               t.

0000003c <usbDescriptorStringDevice>:
  3c:	20 03 53 00 65 00 72 00 69 00 61 00 6c 00 20 00      .S.e.r.i.a.l. .
  4c:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.

0000005c <usbDescriptorDevice>:
  5c:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
  6c:	00 01                                               ..

0000006e <usbDescriptorConfiguration>:
  6e:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  7e:	00 00 09 21 01 01 00 01 22 23 00 07 05 81 03 08     ...!...."#......
  8e:	00 0a                                               ..

00000090 <usbDescriptorHidReport>:
  90:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
  a0:	75 01 95 08 81 02 95 01 75 08 25 65 19 00 29 65     u.......u.%e..)e
  b0:	81 00 c0                                            ...

000000b3 <keyReport>:
  b3:	00 00 01 04 01 05 01 06 01 07 01 08 01 09 01 0a     ................
  c3:	00 2a 00 2b 01 0d 01 0e 01 0f 00 28 01 11 01 12     .*.+.......(....
  d3:	01 13 01 14 01 15 01 16 01 17 01 18 01 19 01 1a     ................
  e3:	01 1b 01 1c 01 1d 00 29 00 00 00 00 00 00 00 00     .......)........
  f3:	00 2c 02 1e 02 34 02 20 02 21 02 22 02 24 00 34     .,...4. .!.".$.4
 103:	02 26 02 27 02 25 02 2e 00 36 00 2d 00 37 00 38     .&.'.%...6.-.7.8
 113:	00 27 00 1e 00 1f 00 20 00 21 00 22 00 23 00 24     .'..... .!.".#.$
 123:	00 25 00 26 02 33 00 33 02 36 00 2e 02 37 02 38     .%.&.3.3.6...7.8
 133:	02 1f 02 04 02 05 02 06 02 07 02 08 02 09 02 0a     ................
 143:	02 0b 02 0c 02 0d 02 0e 02 0f 02 10 02 11 02 12     ................
 153:	02 13 02 14 02 15 02 16 02 17 02 18 02 19 02 1a     ................
 163:	02 1b 02 1c 02 1d 00 2f 00 31 00 30 02 23 02 2d     ......./.1.0.#.-
 173:	00 35 00 04 00 05 00 06 00 07 00 08 00 09 00 0a     .5..............
 183:	00 0b 00 0c 00 0d 00 0e 00 0f 00 10 00 11 00 12     ................
 193:	00 13 00 14 00 15 00 16 00 17 00 18 00 19 00 1a     ................
 1a3:	00 1b 00 1c 00 1d 02 2f 02 31 02 30 02 35 00 00     ......./.1.0.5..
 1b3:	00 3a 00 3b 00 3c 00 3d 00 3e 00 3f 00 40 00 41     .:.;.<.=.>.?.@.A
 1c3:	00 42 00 43 00 44 00 45 00 4a 00 52 00 4b 00 00     .B.C.D.E.J.R.K..
 1d3:	00 50 00 00 00 4f 00 00 00 4d 00 51 00 4e 00 49     .P...O...M.Q.N.I
 1e3:	00 4c 00                                            .L.

000001e6 <__ctors_end>:
 1e6:	11 24       	eor	r1, r1
 1e8:	1f be       	out	0x3f, r1	; 63
 1ea:	cf ed       	ldi	r28, 0xDF	; 223
 1ec:	cd bf       	out	0x3d, r28	; 61

000001ee <__do_copy_data>:
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	a0 e6       	ldi	r26, 0x60	; 96
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e0 e9       	ldi	r30, 0x90	; 144
 1f6:	f7 e0       	ldi	r31, 0x07	; 7
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <.do_copy_data_start>

000001fa <.do_copy_data_loop>:
 1fa:	05 90       	lpm	r0, Z+
 1fc:	0d 92       	st	X+, r0

000001fe <.do_copy_data_start>:
 1fe:	a2 36       	cpi	r26, 0x62	; 98
 200:	b1 07       	cpc	r27, r17
 202:	d9 f7       	brne	.-10     	; 0x1fa <.do_copy_data_loop>

00000204 <__do_clear_bss>:
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	a2 e6       	ldi	r26, 0x62	; 98
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
 20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
 20e:	ae 39       	cpi	r26, 0x9E	; 158
 210:	b1 07       	cpc	r27, r17
 212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
 214:	57 d1       	rcall	.+686    	; 0x4c4 <main>
 216:	ba c2       	rjmp	.+1396   	; 0x78c <_exit>

00000218 <__bad_interrupt>:
 218:	f3 ce       	rjmp	.-538    	; 0x0 <__vectors>

0000021a <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 220:	8b b7       	in	r24, 0x3b	; 59
 222:	80 64       	ori	r24, 0x40	; 64
 224:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 226:	8b e4       	ldi	r24, 0x4B	; 75
 228:	80 93 72 00 	sts	0x0072, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 22c:	8a e5       	ldi	r24, 0x5A	; 90
 22e:	80 93 71 00 	sts	0x0071, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 232:	08 95       	ret

00000234 <usbFunctionSetup>:
    0xc0                           // END_COLLECTION
};

uchar	usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 234:	fc 01       	movw	r30, r24

    usbMsgPtr = reportBuffer;
 236:	84 e6       	ldi	r24, 0x64	; 100
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 83 00 	sts	0x0083, r25
 23e:	80 93 82 00 	sts	0x0082, r24
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 242:	80 81       	ld	r24, Z
 244:	80 76       	andi	r24, 0x60	; 96
 246:	80 32       	cpi	r24, 0x20	; 32
 248:	b1 f4       	brne	.+44     	; 0x276 <usbFunctionSetup+0x42>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 24a:	81 81       	ldd	r24, Z+1	; 0x01
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	11 f4       	brne	.+4      	; 0x254 <usbFunctionSetup+0x20>
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	08 95       	ret
            /* we only have one report type, so don't look at wValue */
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	41 f4       	brne	.+16     	; 0x268 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 258:	83 e6       	ldi	r24, 0x63	; 99
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 83 00 	sts	0x0083, r25
 260:	80 93 82 00 	sts	0x0082, r24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 268:	8a 30       	cpi	r24, 0x0A	; 10
 26a:	29 f4       	brne	.+10     	; 0x276 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
 26c:	83 81       	ldd	r24, Z+3	; 0x03
 26e:	80 93 63 00 	sts	0x0063, r24
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
 276:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
	return 0;
}
 278:	08 95       	ret

0000027a <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 280:	90 91 84 00 	lds	r25, 0x0084
 284:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 286:	97 fd       	sbrc	r25, 7
 288:	a1 c0       	rjmp	.+322    	; 0x3cc <usbPoll+0x152>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 28a:	20 91 7f 00 	lds	r18, 0x007F
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 28e:	80 91 7e 00 	lds	r24, 0x007E
 292:	8d 32       	cpi	r24, 0x2D	; 45
 294:	09 f0       	breq	.+2      	; 0x298 <usbPoll+0x1e>
 296:	98 c0       	rjmp	.+304    	; 0x3c8 <usbPoll+0x14e>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 298:	98 30       	cpi	r25, 0x08	; 8
 29a:	09 f0       	breq	.+2      	; 0x29e <usbPoll+0x24>
 29c:	95 c0       	rjmp	.+298    	; 0x3c8 <usbPoll+0x14e>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 29e:	cc e0       	ldi	r28, 0x0C	; 12
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	c2 1b       	sub	r28, r18
 2a4:	d1 09       	sbc	r29, r1
 2a6:	c8 57       	subi	r28, 0x78	; 120
 2a8:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 2aa:	83 ec       	ldi	r24, 0xC3	; 195
 2ac:	80 93 66 00 	sts	0x0066, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 2b0:	8a e5       	ldi	r24, 0x5A	; 90
 2b2:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 2b6:	10 92 62 00 	sts	0x0062, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 2ba:	88 81       	ld	r24, Y
 2bc:	80 76       	andi	r24, 0x60	; 96
 2be:	21 f0       	breq	.+8      	; 0x2c8 <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
 2c0:	ce 01       	movw	r24, r28
 2c2:	b8 df       	rcall	.-144    	; 0x234 <usbFunctionSetup>
 2c4:	28 2f       	mov	r18, r24
 2c6:	77 c0       	rjmp	.+238    	; 0x3b6 <usbPoll+0x13c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 2c8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 2ca:	10 92 6f 00 	sts	0x006F, r1
    SWITCH_START(rq->bRequest)
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 2d0:	88 23       	and	r24, r24
 2d2:	21 f4       	brne	.+8      	; 0x2dc <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 2d4:	10 92 70 00 	sts	0x0070, r1
 2d8:	22 e0       	ldi	r18, 0x02	; 2
 2da:	67 c0       	rjmp	.+206    	; 0x3aa <usbPoll+0x130>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 2dc:	85 30       	cpi	r24, 0x05	; 5
 2de:	19 f4       	brne	.+6      	; 0x2e6 <usbPoll+0x6c>
        usbNewDeviceAddr = value;
 2e0:	90 93 85 00 	sts	0x0085, r25
 2e4:	61 c0       	rjmp	.+194    	; 0x3a8 <usbPoll+0x12e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 2e6:	86 30       	cpi	r24, 0x06	; 6
 2e8:	09 f0       	breq	.+2      	; 0x2ec <usbPoll+0x72>
 2ea:	4a c0       	rjmp	.+148    	; 0x380 <usbPoll+0x106>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 2f2:	8c e5       	ldi	r24, 0x5C	; 92
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	1b c0       	rjmp	.+54     	; 0x32e <usbPoll+0xb4>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	41 f4       	brne	.+16     	; 0x30c <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 2fc:	8e e6       	ldi	r24, 0x6E	; 110
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 83 00 	sts	0x0083, r25
 304:	80 93 82 00 	sts	0x0082, r24
 308:	22 e2       	ldi	r18, 0x22	; 34
 30a:	36 c0       	rjmp	.+108    	; 0x378 <usbPoll+0xfe>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	f9 f4       	brne	.+62     	; 0x34e <usbPoll+0xd4>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 310:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 312:	88 23       	and	r24, r24
 314:	41 f4       	brne	.+16     	; 0x326 <usbPoll+0xac>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 316:	86 e2       	ldi	r24, 0x26	; 38
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 83 00 	sts	0x0083, r25
 31e:	80 93 82 00 	sts	0x0082, r24
 322:	24 e0       	ldi	r18, 0x04	; 4
 324:	29 c0       	rjmp	.+82     	; 0x378 <usbPoll+0xfe>
        SWITCH_CASE(1)
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	41 f4       	brne	.+16     	; 0x33a <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 32a:	8a e2       	ldi	r24, 0x2A	; 42
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 83 00 	sts	0x0083, r25
 332:	80 93 82 00 	sts	0x0082, r24
 336:	22 e1       	ldi	r18, 0x12	; 18
 338:	1f c0       	rjmp	.+62     	; 0x378 <usbPoll+0xfe>
        SWITCH_CASE(2)
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	e1 f4       	brne	.+56     	; 0x376 <usbPoll+0xfc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 33e:	8c e3       	ldi	r24, 0x3C	; 60
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 83 00 	sts	0x0083, r25
 346:	80 93 82 00 	sts	0x0082, r24
 34a:	20 e2       	ldi	r18, 0x20	; 32
 34c:	15 c0       	rjmp	.+42     	; 0x378 <usbPoll+0xfe>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 34e:	81 32       	cpi	r24, 0x21	; 33
 350:	41 f4       	brne	.+16     	; 0x362 <usbPoll+0xe8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 83 00 	sts	0x0083, r25
 35a:	80 93 82 00 	sts	0x0082, r24
 35e:	29 e0       	ldi	r18, 0x09	; 9
 360:	0b c0       	rjmp	.+22     	; 0x378 <usbPoll+0xfe>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 362:	82 32       	cpi	r24, 0x22	; 34
 364:	41 f4       	brne	.+16     	; 0x376 <usbPoll+0xfc>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 366:	80 e9       	ldi	r24, 0x90	; 144
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 83 00 	sts	0x0083, r25
 36e:	80 93 82 00 	sts	0x0082, r24
 372:	23 e2       	ldi	r18, 0x23	; 35
 374:	01 c0       	rjmp	.+2      	; 0x378 <usbPoll+0xfe>
 376:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 378:	80 e4       	ldi	r24, 0x40	; 64
 37a:	80 93 62 00 	sts	0x0062, r24
 37e:	1b c0       	rjmp	.+54     	; 0x3b6 <usbPoll+0x13c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	21 f4       	brne	.+8      	; 0x38c <usbPoll+0x112>
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	87 e8       	ldi	r24, 0x87	; 135
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	11 c0       	rjmp	.+34     	; 0x3ae <usbPoll+0x134>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 38c:	89 30       	cpi	r24, 0x09	; 9
 38e:	19 f4       	brne	.+6      	; 0x396 <usbPoll+0x11c>
        usbConfiguration = value;
 390:	90 93 87 00 	sts	0x0087, r25
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <usbPoll+0x12e>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 396:	8a 30       	cpi	r24, 0x0A	; 10
 398:	11 f4       	brne	.+4      	; 0x39e <usbPoll+0x124>
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <usbPoll+0x130>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 39e:	8b 30       	cpi	r24, 0x0B	; 11
 3a0:	19 f4       	brne	.+6      	; 0x3a8 <usbPoll+0x12e>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3a2:	8b e4       	ldi	r24, 0x4B	; 75
 3a4:	80 93 72 00 	sts	0x0072, r24
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	8f e6       	ldi	r24, 0x6F	; 111
 3ac:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 3ae:	90 93 83 00 	sts	0x0083, r25
 3b2:	80 93 82 00 	sts	0x0082, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 3b6:	8f 81       	ldd	r24, Y+7	; 0x07
 3b8:	88 23       	and	r24, r24
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <usbPoll+0x14a>
 3bc:	8e 81       	ldd	r24, Y+6	; 0x06
 3be:	82 17       	cp	r24, r18
 3c0:	08 f4       	brcc	.+2      	; 0x3c4 <usbPoll+0x14a>
 3c2:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 3c4:	20 93 61 00 	sts	0x0061, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 3c8:	10 92 84 00 	sts	0x0084, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 3cc:	80 91 60 00 	lds	r24, 0x0060
 3d0:	84 ff       	sbrs	r24, 4
 3d2:	49 c0       	rjmp	.+146    	; 0x466 <usbPoll+0x1ec>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 3d4:	80 91 61 00 	lds	r24, 0x0061
 3d8:	8f 3f       	cpi	r24, 0xFF	; 255
 3da:	09 f4       	brne	.+2      	; 0x3de <usbPoll+0x164>
 3dc:	44 c0       	rjmp	.+136    	; 0x466 <usbPoll+0x1ec>
 3de:	18 2f       	mov	r17, r24
 3e0:	89 30       	cpi	r24, 0x09	; 9
 3e2:	08 f0       	brcs	.+2      	; 0x3e6 <usbPoll+0x16c>
 3e4:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 3e6:	81 1b       	sub	r24, r17
 3e8:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 3ec:	80 91 66 00 	lds	r24, 0x0066
 3f0:	98 e8       	ldi	r25, 0x88	; 136
 3f2:	89 27       	eor	r24, r25
 3f4:	80 93 66 00 	sts	0x0066, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 3f8:	11 23       	and	r17, r17
 3fa:	41 f1       	breq	.+80     	; 0x44c <usbPoll+0x1d2>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 3fc:	20 91 82 00 	lds	r18, 0x0082
 400:	30 91 83 00 	lds	r19, 0x0083
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 404:	80 91 62 00 	lds	r24, 0x0062
 408:	86 ff       	sbrs	r24, 6
 40a:	0d c0       	rjmp	.+26     	; 0x426 <usbPoll+0x1ac>
 40c:	a7 e6       	ldi	r26, 0x67	; 103
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 414:	f9 01       	movw	r30, r18
 416:	e8 0f       	add	r30, r24
 418:	f9 1f       	adc	r31, r25
 41a:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 41c:	ed 93       	st	X+, r30
 41e:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 420:	18 17       	cp	r17, r24
 422:	c1 f7       	brne	.-16     	; 0x414 <usbPoll+0x19a>
 424:	08 c0       	rjmp	.+16     	; 0x436 <usbPoll+0x1bc>
 426:	91 2f       	mov	r25, r17
 428:	d9 01       	movw	r26, r18
 42a:	e7 e6       	ldi	r30, 0x67	; 103
 42c:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 42e:	8d 91       	ld	r24, X+
 430:	81 93       	st	Z+, r24
                }while(--i);
 432:	91 50       	subi	r25, 0x01	; 1
 434:	e1 f7       	brne	.-8      	; 0x42e <usbPoll+0x1b4>
 436:	11 50       	subi	r17, 0x01	; 1
 438:	81 2f       	mov	r24, r17
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	1f 5f       	subi	r17, 0xFF	; 255
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	82 0f       	add	r24, r18
 442:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 444:	90 93 83 00 	sts	0x0083, r25
 448:	80 93 82 00 	sts	0x0082, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 44c:	87 e6       	ldi	r24, 0x67	; 103
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	61 2f       	mov	r22, r17
 452:	80 d0       	rcall	.+256    	; 0x554 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 454:	61 2f       	mov	r22, r17
 456:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 458:	6c 30       	cpi	r22, 0x0C	; 12
 45a:	19 f0       	breq	.+6      	; 0x462 <usbPoll+0x1e8>
            usbMsgLen = USB_NO_MSG;
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	80 93 61 00 	sts	0x0061, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 462:	60 93 60 00 	sts	0x0060, r22
 466:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 468:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 46a:	8c 70       	andi	r24, 0x0C	; 12
 46c:	31 f4       	brne	.+12     	; 0x47a <usbPoll+0x200>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	d9 f7       	brne	.-10     	; 0x468 <usbPoll+0x1ee>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 472:	10 92 85 00 	sts	0x0085, r1
    usbDeviceAddr = 0;
 476:	10 92 7d 00 	sts	0x007D, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	08 95       	ret

00000482 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 482:	1f 93       	push	r17
 484:	dc 01       	movw	r26, r24
 486:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 488:	80 91 71 00 	lds	r24, 0x0071
 48c:	84 ff       	sbrs	r24, 4
 48e:	07 c0       	rjmp	.+14     	; 0x49e <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 490:	80 91 72 00 	lds	r24, 0x0072
 494:	98 e8       	ldi	r25, 0x88	; 136
 496:	89 27       	eor	r24, r25
 498:	80 93 72 00 	sts	0x0072, r24
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 49e:	8a e5       	ldi	r24, 0x5A	; 90
 4a0:	80 93 71 00 	sts	0x0071, r24
 4a4:	91 2f       	mov	r25, r17
 4a6:	e3 e7       	ldi	r30, 0x73	; 115
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 4aa:	8d 91       	ld	r24, X+
 4ac:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 4b2:	83 e7       	ldi	r24, 0x73	; 115
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	61 2f       	mov	r22, r17
 4b8:	4d d0       	rcall	.+154    	; 0x554 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 4ba:	1c 5f       	subi	r17, 0xFC	; 252
 4bc:	10 93 71 00 	sts	0x0071, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 4c0:	1f 91       	pop	r17
 4c2:	08 95       	ret

000004c4 <main>:

int main() {

num = 0;
 4c4:	10 92 81 00 	sts	0x0081, r1
 4c8:	10 92 80 00 	sts	0x0080, r1
UCSRB = (1<<RXEN);
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	8a b9       	out	0x0a, r24	; 10
UCSRC = (1<<UCSZ1) | (1<<UCSZ0);
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	83 b9       	out	0x03, r24	; 3
UBRRL = 64; //19200
 4d4:	80 e4       	ldi	r24, 0x40	; 64
 4d6:	89 b9       	out	0x09, r24	; 9
usbInit(); // start v-usb
 4d8:	a0 de       	rcall	.-704    	; 0x21a <usbInit>
sei(); // enable interrupts
 4da:	78 94       	sei
while (1) {
	usbPoll();
	while (!usbInterruptIsReady()) {
		usbPoll();
 4dc:	ce de       	rcall	.-612    	; 0x27a <usbPoll>
UBRRL = 64; //19200
usbInit(); // start v-usb
sei(); // enable interrupts
while (1) {
	usbPoll();
	while (!usbInterruptIsReady()) {
 4de:	80 91 71 00 	lds	r24, 0x0071
 4e2:	84 ff       	sbrs	r24, 4
 4e4:	fb cf       	rjmp	.-10     	; 0x4dc <main+0x18>
		usbPoll();
		}
	if ((UCSRA &_BV(RXC)) != 0) {
 4e6:	5f 9b       	sbis	0x0b, 7	; 11
 4e8:	17 c0       	rjmp	.+46     	; 0x518 <main+0x54>
		num = UDR;
 4ea:	8c b1       	in	r24, 0x0c	; 12
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	90 93 81 00 	sts	0x0081, r25
 4f2:	80 93 80 00 	sts	0x0080, r24
		reportBuffer[0] = pgm_read_word(&(keyReport[num][0]));
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	fc 01       	movw	r30, r24
 4fc:	ed 54       	subi	r30, 0x4D	; 77
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	25 91       	lpm	r18, Z+
 502:	34 91       	lpm	r19, Z+
 504:	20 93 64 00 	sts	0x0064, r18
		reportBuffer[1] = pgm_read_word(&(keyReport[num][1]));
 508:	fc 01       	movw	r30, r24
 50a:	ec 54       	subi	r30, 0x4C	; 76
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	85 91       	lpm	r24, Z+
 510:	94 91       	lpm	r25, Z+
 512:	80 93 65 00 	sts	0x0065, r24
 516:	04 c0       	rjmp	.+8      	; 0x520 <main+0x5c>
		}
	else {
		reportBuffer[0] = 0;
 518:	10 92 64 00 	sts	0x0064, r1
		reportBuffer[1] = 0;
 51c:	10 92 65 00 	sts	0x0065, r1
		}
	usbSetInterrupt((&reportBuffer[0]), sizeof(reportBuffer));
 520:	84 e6       	ldi	r24, 0x64	; 100
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	ad df       	rcall	.-166    	; 0x482 <usbSetInterrupt>
 528:	d9 cf       	rjmp	.-78     	; 0x4dc <main+0x18>

0000052a <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 52a:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 52c:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 530:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 532:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 534:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 536:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 538:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 53a:	09 c0       	rjmp	.+18     	; 0x54e <usbCrcLoopEntry>

0000053c <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 53c:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 53e:	82 27       	eor	r24, r18

00000540 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 540:	97 95       	ror	r25
    ror     resCrcL
 542:	87 95       	ror	r24
    brcs    usbCrcNoXor
 544:	10 f0       	brcs	.+4      	; 0x54a <usbCrcNoXor>
    eor     resCrcL, polyL
 546:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 548:	95 27       	eor	r25, r21

0000054a <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 54a:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 54c:	c8 f3       	brcs	.-14     	; 0x540 <usbCrcBitLoop>

0000054e <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 54e:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 550:	a8 f3       	brcs	.-22     	; 0x53c <usbCrcByteLoop>

00000552 <usbCrcReady>:
usbCrcReady:
    ret
 552:	08 95       	ret

00000554 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 554:	ea df       	rcall	.-44     	; 0x52a <usbCrc16>
    st      ptr+, resCrcL
 556:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 558:	9d 93       	st	X+, r25
    ret
 55a:	08 95       	ret

0000055c <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
 55c:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
 55e:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
 560:	cf 93       	push	r28
    push    YH                  ;[-23]
 562:	df 93       	push	r29

00000564 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 564:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 566:	83 9b       	sbis	0x10, 3	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 568:	e9 f7       	brne	.-6      	; 0x564 <waitForJ>

0000056a <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
 56a:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK              ;[-18]
 56c:	11 c0       	rjmp	.+34     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 56e:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 570:	0f c0       	rjmp	.+30     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 572:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 574:	0d c0       	rjmp	.+26     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 576:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 578:	0b c0       	rjmp	.+22     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 57a:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 57c:	09 c0       	rjmp	.+18     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 57e:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 580:	07 c0       	rjmp	.+14     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 582:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 584:	05 c0       	rjmp	.+10     	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 586:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 588:	03 c0       	rjmp	.+6      	; 0x590 <foundK>
    sbis    USBIN, USBMINUS
 58a:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 58c:	01 c0       	rjmp	.+2      	; 0x590 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 58e:	83 c0       	rjmp	.+262    	; 0x696 <sofError>

00000590 <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
 590:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
 592:	c0 91 7f 00 	lds	r28, 0x007F
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
 596:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
 598:	c8 57       	subi	r28, 0x78	; 120
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
 59a:	df 4f       	sbci	r29, 0xFF	; 255
    push    shift               ;[-9]
 59c:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
 59e:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
 5a2:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
 5a4:	83 9b       	sbis	0x10, 3	; 16
    rjmp    haveTwoBitsK        ;[-2]
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
 5a8:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
 5aa:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
 5ac:	de cf       	rjmp	.-68     	; 0x56a <waitForK>

000005ae <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
 5ae:	0f 93       	push	r16
    push    x2                  ;[2]
 5b0:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
 5b2:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
 5b4:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
 5b6:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
 5b8:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
 5ba:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
 5bc:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
 5be:	14 e0       	ldi	r17, 0x04	; 4

000005c0 <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
 5c0:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
 5c2:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;[2] make bit0 14 cycles long
 5c4:	2e c0       	rjmp	.+92     	; 0x622 <handleBit>

000005c6 <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
 5c6:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
 5c8:	c9 f0       	breq	.+50     	; 0x5fc <unstuff6>

000005ca <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
 5ca:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
 5cc:	d8 f1       	brcs	.+118    	; 0x644 <overflow>
    in      x1, USBIN           ;[0] sample line state
 5ce:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
 5d0:	0c 70       	andi	r16, 0x0C	; 12
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
 5d2:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
 5d4:	0b c0       	rjmp	.+22     	; 0x5ec <b7handle0>
    sec                         ;[4]
 5d6:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
 5d8:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
 5da:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
 5dc:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
 5de:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
 5e0:	00 f4       	brcc	.+0      	; 0x5e2 <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
 5e2:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
 5e4:	69 f7       	brne	.-38     	; 0x5c0 <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
 5e6:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
 5e8:	60 b3       	in	r22, 0x10	; 16
    rjmp    unstuff             ;[1]
 5ea:	0b c0       	rjmp	.+22     	; 0x602 <unstuff>

000005ec <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
 5ec:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
 5ee:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
 5f0:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
 5f2:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
 5f4:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
 5f6:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
 5f8:	18 f3       	brcs	.-58     	; 0x5c0 <bit0>
    rjmp    bit0                ;[13]
 5fa:	e2 cf       	rjmp	.-60     	; 0x5c0 <bit0>

000005fc <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
 5fc:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
 5fe:	60 b3       	in	r22, 0x10	; 16
	...

00000602 <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
 602:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
 604:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
 606:	00 f0       	brcs	.+0      	; 0x608 <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
 608:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
 60a:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
 60c:	1c 70       	andi	r17, 0x0C	; 12
    cpi     x1,0                ;[9]  [8]  [9]
 60e:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
 610:	e2 f2       	brmi	.-72     	; 0x5ca <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
 612:	21 f0       	breq	.+8      	; 0x61c <bitloop>
    nop                         ;---  ---  [12]
 614:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
 616:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
 618:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
 61a:	03 c0       	rjmp	.+6      	; 0x622 <handleBit>

0000061c <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
 61c:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
 61e:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0                 ;[2] both lines are low so handle se0
 620:	a9 f0       	breq	.+42     	; 0x64c <se0>

00000622 <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
 622:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
 624:	09 c0       	rjmp	.+18     	; 0x638 <handle0>
    sec                         ;[5]
 626:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
 628:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
 62a:	68 f2       	brcs	.-102    	; 0x5c6 <b6checkUnstuff>
    nop2                        ;[8]
 62c:	00 c0       	rjmp	.+0      	; 0x62e <handleBit+0xc>
    dec     bitcnt              ;[10]
 62e:	6a 95       	dec	r22
    brne    bitloop             ;[11]
 630:	a9 f7       	brne	.-22     	; 0x61c <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
 632:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
 634:	60 b3       	in	r22, 0x10	; 16
    rjmp    unstuff             ;[1]
 636:	e5 cf       	rjmp	.-54     	; 0x602 <unstuff>

00000638 <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
 638:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
 63a:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
 63c:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
 63e:	28 f2       	brcs	.-118    	; 0x5ca <bit7>
    nop                         ;[10]
 640:	00 00       	nop
    rjmp    bitloop             ;[11] 
 642:	ec cf       	rjmp	.-40     	; 0x61c <bitloop>

00000644 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 644:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 646:	1a bf       	out	0x3a, r17	; 58

00000648 <ignorePacket>:
ignorePacket:
    clr     token
 648:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 64a:	19 c0       	rjmp	.+50     	; 0x67e <handleSetupOrOut>

0000064c <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 64c:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 64e:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 650:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 652:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 654:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 656:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 658:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 65a:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 65c:	09 f1       	breq	.+66     	; 0x6a0 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 65e:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 660:	f9 f0       	breq	.+62     	; 0x6a0 <handleData>
    lds     shift, usbDeviceAddr;[17]
 662:	20 91 7d 00 	lds	r18, 0x007D
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 666:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 668:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 66a:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 66c:	ed cf       	rjmp	.-38     	; 0x648 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 66e:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 670:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 672:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 674:	51 f1       	breq	.+84     	; 0x6ca <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 676:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 678:	11 f0       	breq	.+4      	; 0x67e <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 67a:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 67c:	29 f7       	brne	.-54     	; 0x648 <ignorePacket>

0000067e <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 67e:	00 93 86 00 	sts	0x0086, r16

00000682 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 682:	3f 91       	pop	r19
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	2f 91       	pop	r18
 68e:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 690:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 692:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 694:	67 cf       	rjmp	.-306    	; 0x564 <waitForJ>

00000696 <sofError>:
sofError:
    POP_RETI                    ;macro call
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	cf bf       	out	0x3f, r28	; 63
 69c:	cf 91       	pop	r28
    reti
 69e:	18 95       	reti

000006a0 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 6a0:	20 91 86 00 	lds	r18, 0x0086
    tst     shift               ;[20]
 6a4:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 6a6:	69 f3       	breq	.-38     	; 0x682 <doReturn>
    lds     x2, usbRxLen        ;[22]
 6a8:	10 91 84 00 	lds	r17, 0x0084
    tst     x2                  ;[24]
 6ac:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 6ae:	81 f5       	brne	.+96     	; 0x710 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 6b0:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 6b2:	82 f1       	brmi	.+96     	; 0x714 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 6b4:	30 93 84 00 	sts	0x0084, r19
    sts     usbRxToken, shift   ;[30]
 6b8:	20 93 7e 00 	sts	0x007E, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 6bc:	10 91 7f 00 	lds	r17, 0x007F
    ldi     cnt, USB_BUFSIZE    ;[34]
 6c0:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 6c2:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 6c4:	30 93 7f 00 	sts	0x007F, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 6c8:	25 c0       	rjmp	.+74     	; 0x714 <sendAckAndReti>

000006ca <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 6ca:	00 91 84 00 	lds	r16, 0x0084
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 6ce:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 6d0:	fc f4       	brge	.+62     	; 0x710 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 6d2:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 6d4:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 6d6:	49 f4       	brne	.+18     	; 0x6ea <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 6d8:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 6dc:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 6de:	1b c0       	rjmp	.+54     	; 0x716 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 6e0:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 6e4:	c6 e6       	ldi	r28, 0x66	; 102
    ldi     YH, hi8(usbTxBuf)   ;[44]
 6e6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 6e8:	1a c0       	rjmp	.+52     	; 0x71e <usbSendAndReti>

000006ea <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 6ea:	30 91 71 00 	lds	r19, 0x0071
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 6ee:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 6f0:	12 c0       	rjmp	.+36     	; 0x716 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 6f2:	00 93 71 00 	sts	0x0071, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 6f6:	c2 e7       	ldi	r28, 0x72	; 114
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 6fa:	11 c0       	rjmp	.+34     	; 0x71e <usbSendAndReti>

000006fc <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
 6fc:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
 6fe:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
 700:	00 c0       	rjmp	.+0      	; 0x702 <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
 702:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuffN       ;[0]
 704:	19 c0       	rjmp	.+50     	; 0x738 <didStuffN>

00000706 <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
 706:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
 708:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
 70a:	22 1f       	adc	r18, r18
    nop2                    ;[9]
 70c:	00 c0       	rjmp	.+0      	; 0x70e <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
 70e:	1d c0       	rjmp	.+58     	; 0x74a <didStuff7>

00000710 <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 710:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 712:	02 c0       	rjmp	.+4      	; 0x718 <sendX3AndReti>

00000714 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 714:	32 ed       	ldi	r19, 0xD2	; 210

00000716 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 716:	43 2f       	mov	r20, r19

00000718 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 718:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 71a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 71c:	32 e0       	ldi	r19, 0x02	; 2

0000071e <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 71e:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;[-11]
 720:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 722:	93 9a       	sbi	0x12, 3	; 18
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 724:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;[-7] <- acquire bus
 726:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 728:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 72a:	20 e8       	ldi	r18, 0x80	; 128

0000072c <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
 72c:	69 e4       	ldi	r22, 0x49	; 73

0000072e <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
 72e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
 730:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
 732:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0]  [13]   [14]
 734:	27 95       	ror	r18
    ror     x2              ;[1]
 736:	17 95       	ror	r17

00000738 <didStuffN>:
didStuffN:
    nop2                    ;[2]
 738:	00 c0       	rjmp	.+0      	; 0x73a <didStuffN+0x2>
    nop                     ;[4]
 73a:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
 73c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
 73e:	f0 f6       	brcc	.-68     	; 0x6fc <bitstuffN>
    lsr     bitcnt          ;[7]
 740:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
 742:	a8 f7       	brcc	.-22     	; 0x72e <txBitLoop>
    brne    txBitLoop       ;[9]
 744:	a1 f7       	brne	.-24     	; 0x72e <txBitLoop>

    sbrs    shift, 0        ;[10]
 746:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
 748:	05 27       	eor	r16, r21

0000074a <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
 74a:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [14]
 74c:	27 95       	ror	r18
    ror     x2              ;[1]
 74e:	17 95       	ror	r17
    nop                     ;[2]
 750:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
 752:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
 754:	c0 f6       	brcc	.-80     	; 0x706 <bitstuff7>
    ld      shift, y+       ;[5]
 756:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
 758:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
 75a:	41 f7       	brne	.-48     	; 0x72c <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
 75c:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[10]
 75e:	10 91 85 00 	lds	r17, 0x0085
    lsl     x2              ;[12] we compare with left shifted address
 762:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 764:	02 bb       	out	0x12, r16	; 18
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
 766:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
 768:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
 76a:	11 f0       	breq	.+4      	; 0x770 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 76c:	10 93 7d 00 	sts	0x007D, r17

00000770 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
 770:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
 772:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
 774:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[7]
 776:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;[8] set both pins to input
 778:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[9]
 77a:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
 77c:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 5           ;[11]
 77e:	55 e0       	ldi	r21, 0x05	; 5

00000780 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
 780:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
 782:	f1 f7       	brne	.-4      	; 0x780 <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
 784:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;[27] <-- release bus now
 786:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
 788:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 78a:	7b cf       	rjmp	.-266    	; 0x682 <doReturn>

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
